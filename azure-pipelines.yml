# Starter pipeline

variables:
  buildDir: $(Agent.BuildDirectory)
  buildName: $(Build.DefinitionName)_$(Build.SourceBranchName)_$(Build.BuildNumber)
  
  depProject: $(buildName)_${{parameters.targetEnvironment}}
  depSet: "deploymentset"
  depMap: "deploymentmap"
  depCandidate: "deploymentcandidate"
  
  
  
parameters:
- name: targetEnvironment
  displayName: Target Environment
  type: string
  default: sit
  values:
  - sit
  - uat
  - prod

trigger:
- master

pool:
  name: lxn-agent-pool

stages:
- stage: Build
  jobs:
  - job: Create_Build
    steps:
    - bash: |
       echo $(buildName)
       echo $(Agent.BuildDirectory)
       echo $(sagHome)
       echo ${{parameters.targetEnvironment}}
       echo $(buildDir)
       cd $(sagHome)/common/AssetBuildEnvironment/bin/
       ./build.sh \
        -Dsag.install.dir=$(sagHome) \
        -Dbuild.source.dir=$(buildDir)/s/source/IS/ \
        -Dbuild.output.dir=$(buildDir)/build/ \
        -Denable.build.IS=true \
        -Dbuild.version=1.0      
       
       cd $(buildDir)/build/
       ls -ltr
    displayName: 'Create_Build'

- stage: UnitTest
  jobs:
  - job: UnitTest
    steps:
    - bash: |
       echo $(sagHome)
       cd $(sagHome)/common/lib/ant/bin/
       ./ant -file $(buildDir)/s/scripts/unittest/build-runsuite.xml run-tests \
       	-DsagHome=$(sagHome) \
       	-DbuildHome=$(buildDir)/s/source/IS \
       	-Dhostname=$(stageHost) \
       	-Dport=$(stagePort) \
       	-Dusername=$(stageUser) \
       	-Dpassword=$(stagePassword)
    displayName: 'UnitTest'
    
- stage: Deploy
  jobs:
  - job: Create_Target_Project
    steps:
    - bash: |
       echo $(sagHome)
       cd $(sagHome)/common/lib/ant/bin/
       ./ant -file $(buildDir)/s/scripts/deployer/build.xml createProjectReposiotry \
       	-Dsag.install.dir=$(sagHome) \
        -Dautomator.file=$(buildDir)/s/scripts/deployer/ProjectAutomatorIS.xml \
        -Dautomator.file.tpl=$(buildDir)/s/scripts/deployer/ProjectAutomatorIS.tpl \
        -Ddeployer.home=$(sagHome)/IntegrationServer/instances/default/packages/WmDeployer \
        -Ddeployer.host=$(stageHost) \
        -Ddeployer.port=$(stagePort) \
        -Ddeployer.user=$(stageUser) \
        -Ddeployer.pwd=$(stagePassword) \
        -Dis_proj.name=$(buildName)_${{parameters.targetEnvironment}} \
        -Dis_depset.name=$(depSet) \
        -Dis_depmap.name=$(depMap) \
        -Dis_depcan.name=$(depCandidate) \
        -Dproj_repository.name=$(buildName) \
        -Dproj_repository.path=$(buildDir)/build/ \
        -Dis_target.alias=${{parameters.targetEnvironment}} \
        -Dis_target.host=$(targetHost) \
        -Dis_target.port=$(targetPort) \
        -Dis_target.user=$(targetUser) \
        -Dis_target.pwd=$(targetPassword) \
        -Dis.version=$(targetVersion)
    displayName: 'Create_Target_Project'
  - job: Deploy_Target
    dependsOn: Create_Target_Project
    steps:
    - bash: |    
       echo $(sagHome)
       cd $(sagHome)/IntegrationServer/instances/default/packages/WmDeployer/bin/
       ./Deployer.sh --deploy \
        -project $(buildName)_${{parameters.targetEnvironment}} \
        -dc $(depCandidate) \
        -host $(stageHost) \
        -port $(stagePort) \
        -user $(stageUser) \
        -pwd $(stagePassword)  
    displayName: 'Deploy_Target'    

- stage: CleanUp
  jobs:
  - job: Cleanup_Job
    steps:
    - bash: |
       cd $(Agent.BuildDirectory)
       ls -ltr
       rm -rf *
       echo "Deleted the files"
       ls -ltr
         